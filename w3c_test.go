package stdlib

import (
	"encoding/hex"
	"strings"
	"testing"
)

func TestGenerateRandomBytes(t *testing.T) {
	t.Run("GenerateRandomBytes should generate specified number of bytes", func(t *testing.T) {
		n := 10
		b, err := GenerateRandomBytes(n)
		if err != nil {
			t.Errorf("Unexpected error: %v", err)
		}
		if len(b) != n {
			t.Errorf("Generated bytes length mismatch: expected %d, got %d", n, len(b))
		}
	})
}

func TestGenerateTraceIdRaw(t *testing.T) {
	t.Run("GenerateTraceIdRaw should generate 16 bytes", func(t *testing.T) {
		raw, err := GenerateTraceIdRaw()
		if err != nil {
			t.Errorf("Unexpected error: %v", err)
		}
		if len(raw) != 16 {
			t.Errorf("Generated trace ID raw length mismatch: expected 16, got %d", len(raw))
		}
	})
}

func TestGenerateParentIdRaw(t *testing.T) {
	t.Run("GenerateParentIdRaw should generate 8 bytes", func(t *testing.T) {
		raw, err := GenerateParentIdRaw()
		if err != nil {
			t.Errorf("Unexpected error: %v", err)
		}
		if len(raw) != 8 {
			t.Errorf("Generated parent ID raw length mismatch: expected 8, got %d", len(raw))
		}
	})
}

func TestGenerateNewTraceparent(t *testing.T) {
	t.Run("GenerateNewTraceparent should generate valid traceparent", func(t *testing.T) {
		traceparent, err := GenerateNewTraceparent(true)
		if err != nil {
			t.Errorf("Unexpected error: %v", err)
		}

		parts := strings.Split(traceparent, "-")
		if len(parts) != 4 {
			t.Errorf("Generated traceparent has incorrect format")
		}

		// Validate trace ID and parent ID lengths
		if len(parts[1]) != 32 || len(parts[2]) != 16 {
			t.Errorf("Generated traceparent contains incorrect trace ID or parent ID lengths")
		}
	})

	t.Run(
		"GenerateNewTraceparent should generate traceparent with correct flags",
		func(t *testing.T) {
			traceparent, err := GenerateNewTraceparent(false)
			if err != nil {
				t.Errorf("Unexpected error: %v", err)
			}

			parts := strings.Split(traceparent, "-")
			if parts[3] != "00" {
				t.Errorf("Generated traceparent has incorrect flag for non-sampled trace")
			}
		},
	)

	// Add more test cases for different scenarios
}

func TestParseTraceparentRaw(t *testing.T) {
	t.Run("ParseTraceparentRaw should parse valid traceparent", func(t *testing.T) {
		traceparent := "00-0123456789abcdef0123456789abcdef-0123456789abcdef-01"
		vers, tid, pid, flg, err := ParseTraceparentRaw(traceparent)
		if err != nil {
			t.Errorf("Unexpected error: %v", err)
		}

		if len(vers) != 1 || len(tid) != 16 || len(pid) != 8 || len(flg) != 1 {
			t.Errorf("Parsed traceparent values have incorrect lengths")
		}

		if hex.EncodeToString(vers) != "00" || hex.EncodeToString(flg) != "01" {
			t.Errorf("Parsed traceparent values are incorrect")
		}
	})

	t.Run("ParseTraceparentRaw should return error for invalid format", func(t *testing.T) {
		traceparent := "invalid-format"
		_, _, _, _, err := ParseTraceparentRaw(traceparent)
		if err == nil {
			t.Errorf("Expected an error for invalid traceparent format")
		}
	})
}
